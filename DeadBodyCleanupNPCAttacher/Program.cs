using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace DeadBodyCleanupNPCAttacher
{
    public class Program
    {
        public static Lazy<Settings> PatchSettings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out PatchSettings)
                .SetTypicalOpen(GameRelease.SkyrimLE, "DeadBodyCleanupNPCpatch.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // check for unofficial patch in load order
            string unofficialPatchName = PatchSettings.Value.UnofficialPatchName;
            if (!state.LoadOrder.ContainsKey(unofficialPatchName))
            {
                Console.WriteLine($"{unofficialPatchName} not found. Finish.");
                return;
            }

            // forward unofficial patch dead body cleanup script
            ModKey unofficialPatchModKey = ModKey.FromNameAndExtension(unofficialPatchName);
            if (!state.LoadOrder.TryGetValue(unofficialPatchModKey, out IModListing<ISkyrimModGetter>? unofficialPatchModGetter) || unofficialPatchModGetter == null || unofficialPatchModGetter.Mod == null)
            {
                Console.WriteLine($"{unofficialPatchName} not found. Finish.");
                return;
            }
            foreach (var unPatchNPCGetter in unofficialPatchModGetter.Mod.Npcs)
            {
                if (unPatchNPCGetter == null) continue;
                var theScriptEntrieGetter = unPatchNPCGetter.VirtualMachineAdapter?.Scripts.FirstOrDefault(s => string.Equals(s.Name, "wideadbodycleanupscript", StringComparison.InvariantCultureIgnoreCase));
                if (theScriptEntrieGetter == null) continue; // only when has the script

                var lastNPCEdit = state.LinkCache.ResolveAllContexts<INpc, INpcGetter>(unPatchNPCGetter.FormKey).First();
                if (lastNPCEdit.ModKey == unofficialPatchModKey) continue; // unoficial patch is last edit
                if (lastNPCEdit.Record.VirtualMachineAdapter != null && lastNPCEdit.Record.VirtualMachineAdapter.Scripts.Any(s => string.Equals(s.Name, "wideadbodycleanupscript", StringComparison.InvariantCultureIgnoreCase))) continue; // already have the script

                // add script entrie
                var patchedNPC = state.PatchMod.Npcs.GetOrAddAsOverride(lastNPCEdit.Record);
                Console.WriteLine($"Forward script for npc '{patchedNPC.FormKey.ID}'({patchedNPC.EditorID}:[{patchedNPC.Name}])");
                if (patchedNPC.VirtualMachineAdapter == null) patchedNPC.VirtualMachineAdapter = new VirtualMachineAdapter();
                patchedNPC.VirtualMachineAdapter.Scripts.Insert(patchedNPC.VirtualMachineAdapter.Scripts.Count, theScriptEntrieGetter.DeepCopy());
            }

            if (PatchSettings.Value.OnlyScriptForward)
            {
                Console.WriteLine("Selected only script forward, skip add...");
                return;
            }

            // create script
            var deadBodyCleanupScript = new ScriptEntry
            {
                Name = "WIDeadBodyCleanupScript",
                Flags = ScriptEntry.Flag.Local
            };
            var deathContainerScriptProperty = new ScriptObjectProperty
            {
                Name = "DeathContainer",
                Flags = ScriptProperty.Flag.Edited,
                Object = new FormLink<IContainerGetter>(FormKey.Factory("0172B6:Skyrim.esm"))
            };
            deadBodyCleanupScript.Properties.Add(deathContainerScriptProperty);
            var wiScriptProperty = new ScriptObjectProperty
            {
                Name = "WI",
                Flags = ScriptProperty.Flag.Edited,
                Object = new FormLink<IQuestGetter>(FormKey.Factory("035d64:Skyrim.esm"))
            };
            deadBodyCleanupScript.Properties.Add(wiScriptProperty);

            var playerFormkey = FormKey.Factory("000007:Skyrim.esm");
            bool playerFound = false;
            // add script to valid npcs
            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                // skip invalid
                if (!playerFound && npcGetter.FormKey == playerFormkey)
                {
                    playerFound = true; // player check only while not found
                    continue;
                }
                if (!npcGetter.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Unique)) continue; // not unique
                if (npcGetter.Configuration.Flags.HasFlag(NpcConfiguration.Flag.IsCharGenFacePreset)) continue; // is chargen preset
                if (npcGetter.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Summonable)) continue; // is summonable
                if (npcGetter.Template != null && !npcGetter.Template.IsNull && npcGetter.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.Script)) continue; // has template npc and use ithis script
                if (npcGetter.VirtualMachineAdapter != null && npcGetter.VirtualMachineAdapter.Scripts.Any(s => string.Equals(s.Name, "wideadbodycleanupscript", StringComparison.InvariantCultureIgnoreCase))) continue; // already have the script

                var npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter);
                Console.WriteLine($"Add script for npc '{npcGetter.FormKey.ID}'({npcGetter.EditorID}:[{npcGetter.Name}])");

                if (npc.VirtualMachineAdapter == null) npc.VirtualMachineAdapter = new VirtualMachineAdapter();
                npc.VirtualMachineAdapter.Scripts.Insert(npc.VirtualMachineAdapter.Scripts.Count, deadBodyCleanupScript);
            }
        }
    }
}

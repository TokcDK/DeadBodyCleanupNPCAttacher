using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DeadBodyCleanupNPCAttacher
{
    public class Program
    {
        public static Lazy<Settings> PatchSettings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out PatchSettings)
                .SetTypicalOpen(GameRelease.SkyrimLE, "DeadBodyCleanupNPCpatch.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // check for unofficial patch in load order
            string unofficialPatchName = PatchSettings.Value.UnofficialPatchName;
            if (!state.LoadOrder.ContainsKey(unofficialPatchName))
            {
                Console.WriteLine($"{unofficialPatchName} not found. Finish.");
                return;
            }

            // create script
            var deadBodyCleanupScript = new ScriptEntry
            {
                Name = "WIDeadBodyCleanupScript",
                Flags = ScriptEntry.Flag.Local
            };
            var deathContainerScriptProperty = new ScriptObjectProperty
            {
                Name = "DeathContainer",
                Flags = ScriptProperty.Flag.Edited,
                Object = new FormLink<IContainerGetter>(FormKey.Factory("0172B6:Skyrim.esm"))
            };
            deadBodyCleanupScript.Properties.Add(deathContainerScriptProperty);
            var wiScriptProperty = new ScriptObjectProperty
            {
                Name = "WI",
                Flags = ScriptProperty.Flag.Edited,
                Object = new FormLink<IQuestGetter>(FormKey.Factory("035d64:Skyrim.esm"))
            };
            deadBodyCleanupScript.Properties.Add(wiScriptProperty);

            var playerFormkey = FormKey.Factory("000007:Skyrim.esm");
            bool playerFound = false;
            // add script to valid npcs
            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                // skip invalid
                if (!playerFound && npcGetter.FormKey== playerFormkey)
                {
                    playerFound = true; // player check only while not found
                    continue;
                }
                if (!npcGetter.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Unique)) continue; // not unique
                if (!npcGetter.Configuration.Flags.HasFlag(NpcConfiguration.Flag.IsCharGenFacePreset)) continue; // is chargen preset
                if (npcGetter.Template != null && !npcGetter.Template.IsNull && npcGetter.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.Script)) continue; // has template npc and use ithis script
                if ((npcGetter.VirtualMachineAdapter?.Scripts.Select(s => s.Name == "WIDeadBodyCleanupScript").Any()).HasValue) continue; // already have the script

                var npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter);
                Console.WriteLine($"Add script for npc '{npcGetter.FormKey.ID}'({npcGetter.EditorID}:[{npcGetter.Name}])");

                if (npc.VirtualMachineAdapter == null) npc.VirtualMachineAdapter = new VirtualMachineAdapter();
                npc.VirtualMachineAdapter.Scripts.Insert(npc.VirtualMachineAdapter.Scripts.Count, deadBodyCleanupScript);
            }
        }
    }
}
